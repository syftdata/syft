// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate with ts parses an empty schema file 1`] = `
"
import type { StaticConfig, RuntimeConfig, SyftEvent, SyftPlugin } from './types'
import { SyftEventType, NamingCase } from './types'
import BaseSyft from './base'
import { z } from 'zod'




export default class Syft extends BaseSyft {    
  private static readonly staticConfig: StaticConfig = {};

  constructor(config: RuntimeConfig) {
    super(Syft.staticConfig, config);
    console.debug('Syft is running via generated library!');
  }

  resetUser(): void {
    this.batcher.resetUser();
  }

  
}
"
`;

exports[`generate with ts parses an event that is exported 1`] = `
"
import type { StaticConfig, RuntimeConfig, SyftEvent, SyftPlugin } from './types'
import { SyftEventType, NamingCase } from './types'
import BaseSyft from './base'
import { z } from 'zod'



/**
 * 
 */
export interface TestEvent {
    /**
     * 
     */
    backgrounded: boolean;
    /**
     * 
     */
    has_focus?: boolean;
}

const TestEventZod = z.object({
    backgrounded: z.boolean(),
    has_focus: z.boolean(),
});


export default class Syft extends BaseSyft {    
  private static readonly staticConfig: StaticConfig = {};

  constructor(config: RuntimeConfig) {
    super(Syft.staticConfig, config);
    console.debug('Syft is running via generated library!');
  }

  resetUser(): void {
    this.batcher.resetUser();
  }

  

  isValidTestEvent(event: TestEvent): boolean {
    const result = TestEventZod.safeParse(event)
    if (!result.success && this.config.verbose) {
      console.warn("TestEvent is not valid. errors: ", (result as any).error.toString())
    }
    return result.success
  }

  /**
   * 
   * @param event object with fields defined in the syft model file. 
   */
  testEvent(event: TestEvent): boolean {
    const evt = event ?? {}

    if (evt.has_focus === undefined) {
      evt.has_focus = false
    }

    const syft = { eventName: "TestEvent", eventType: SyftEventType.PAGE, isValid: true }    
    if (!this.isValidTestEvent(evt)) {
      if (this.config.strict) {
        return false
      }
      syft.isValid = false
    }
    return this.batcher.logEvent({...evt, syft})
}


}
"
`;

exports[`generate with ts parses an event that is not exported 1`] = `
"
import type { StaticConfig, RuntimeConfig, SyftEvent, SyftPlugin } from './types'
import { SyftEventType, NamingCase } from './types'
import BaseSyft from './base'
import { z } from 'zod'



/**
 * 
 */
export interface TestEvent {
    /**
     * 
     */
    backgrounded: boolean;
    /**
     * 
     */
    has_focus?: boolean;
}

const TestEventZod = z.object({
    backgrounded: z.boolean(),
    has_focus: z.boolean(),
});


export default class Syft extends BaseSyft {    
  private static readonly staticConfig: StaticConfig = {};

  constructor(config: RuntimeConfig) {
    super(Syft.staticConfig, config);
    console.debug('Syft is running via generated library!');
  }

  resetUser(): void {
    this.batcher.resetUser();
  }

  
}
"
`;
