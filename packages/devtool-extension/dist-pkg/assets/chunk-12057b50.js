import{c as y,d as m,l as d,r as S,e as p}from"./chunk-9311e3ec.js";import{M as i}from"./chunk-8ba139f3.js";const v="/assets/index.tsx-loader.3a622674.js";async function T(e,t,n){await chrome.scripting.executeScript({target:{tabId:e,frameIds:[t]},files:[n]})}async function g(e,t){T(e,t,v)}async function x(e,t){await chrome.scripting.executeScript({target:{tabId:e,frameIds:[t]},func:()=>{typeof(window==null?void 0:window.__SYFT_CLEAN_UP)=="function"&&window.__SYFT_CLEAN_UP()}})}async function I(e){console.debug("[Syft][Background] starting recording on ",e);const t=await chrome.tabs.get(e);y(e,0,t.url||""),await x(e,0),await chrome.tabs.reload(e,{bypassCache:!0}),await g(e,0)}async function M(e){console.debug("[Syft][Background] stoping recording on ",e),await m()}chrome.runtime.onMessageExternal.addListener((e,t,n)=>{e.type===i.LoggedIn&&(e.jwt?(console.log("Token ::: ",e.jwt),n({success:!0,message:"Token has been received"})):n({success:!1,message:"Token not found"}))});async function u(e){const{tabId:t,url:n,transitionType:o,frameId:r}=e,{recordingTabId:c,recordingFrameId:b,recordingState:w}=await d(["recordingState","recordingTabId","recordingFrameId"]);r!==b||w!=="active"||c!==t||await S(n,o)}chrome.tabs.onRemoved.addListener(async e=>{const{recordingTabId:t}=await d(["recordingTabId"]);e==t&&m()});chrome.webNavigation.onHistoryStateUpdated.addListener(u);chrome.webNavigation.onReferenceFragmentUpdated.addListener(u);chrome.webNavigation.onCommitted.addListener(u);chrome.webNavigation.onCompleted.addListener(async e=>{const{tabId:t,frameId:n}=e,{recordingTabId:o,recordingFrameId:r,recordingState:c}=await d(["recordingTabId","recordingFrameId","recordingState"]);n!==r||t!=o||c!="active"||await g(t,r)});const l="syft-menu-hover-id",f="syft-menu-await-text-id";chrome.contextMenus.removeAll();chrome.contextMenus.create({title:"Record hover over element",contexts:["all"],id:l,enabled:!1});chrome.contextMenus.create({title:"Assert/wait for selected text",contexts:["selection"],id:f,enabled:!1});chrome.contextMenus.onClicked.addListener(async(e,t)=>{if(typeof t>"u")return;const{recordingTabId:n}=await d(["recordingTabId"]);if(t.id!=n)return;let o="onHoverCtxMenu";e.menuItemId===l?o="onHoverCtxMenu":e.menuItemId===f&&(o="onAwaitTextCtxMenu"),chrome.tabs.sendMessage(n,{type:o,selectionText:e.selectionText})});function s({enabled:e}){chrome.contextMenus.update(l,{enabled:e}),chrome.contextMenus.update(f,{enabled:e})}d(["recordingState"]).then(({recordingState:e})=>{s(e==="active"?{enabled:!0}:{enabled:!1})});chrome.storage.onChanged.addListener(e=>{var t,n,o,r;((t=e==null?void 0:e.recordingState)==null?void 0:t.oldValue)!==((n=e==null?void 0:e.recordingState)==null?void 0:n.newValue)&&(((o=e==null?void 0:e.recordingState)==null?void 0:o.newValue)=="active"&&s({enabled:!0}),((r=e==null?void 0:e.recordingState)==null?void 0:r.newValue)=="finished"&&s({enabled:!1}))});const a={};async function C(e,t){switch(console.debug("[Syft][Background] Received a message from Devtools",e),e.type){case i.InitDevTools:a[e.tabId]=t;break;case i.StartRecord:await I(e.tabId);break;case i.StopRecord:await M(e.tabId);break;case i.ReplaceStep:const n=await p(e.index,e.action);await t.postMessage({type:i.RecordedStep,data:n});break}return!0}chrome.runtime.onConnect.addListener(async function(e){if(console.debug("[Syft][Background] Received a connection",e),e.name!=="syft-devtools")return;const t=function(n,o){return n.type==null||C(n,o).catch(r=>{console.error("[Syft][Background] Error handling message! ",r)}),!0};e.onMessage.addListener(t),e.onDisconnect.addListener(n=>{n.onMessage.removeListener(t);for(var o=Object.keys(a),r=0,c=o.length;r<c;r++)if(a[o[r]]==n){delete a[o[r]];break}})});chrome.runtime.onMessage.addListener(function(e,t,n){var r;if(t.tab){var o=(r=t.tab.id)==null?void 0:r.toString();console.debug("[Syft][Background] Received a message from Content",e),o!=null&&o in a?a[o].postMessage(e):console.error("Tab not found in connection list.",o,Object.keys(a))}return!0});
